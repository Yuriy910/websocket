package webgroup.websocket.services;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import webgroup.websocket.dto.EventDTO;
import webgroup.websocket.entities.Event;
import webgroup.websocket.mappers.EventMapper;
import webgroup.websocket.repositories.EventRepository;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
@Transactional
@Slf4j
public class EventService {

    private final EventRepository eventRepository;
    private final EventMapper eventMapper;

    @Transactional
    public EventDTO save(EventDTO eventDto) {
        if (eventDto == null) {
            log.error("–ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å null-—Å–æ–±—ã—Ç–∏–µ");
            throw new IllegalArgumentException("–°–æ–±—ã—Ç–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å null");
        }

        log.info("–ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ: message={}", eventDto.getMessage());

        Event event = eventMapper.toEntity(eventDto);
        Event saved = eventRepository.save(event);
        eventRepository.flush();

        log.info("–°–æ–±—ã—Ç–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î: ID={}, message={}", saved.getId(), saved.getMessage());

        return eventMapper.toDto(saved);
    }

    @Transactional(readOnly = true)
    public List<EventDTO> findAll() {
        log.info("–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π");
        return eventRepository.findAll().stream()
                .map(eventMapper::toDto)
                .collect(Collectors.toList());
    }

    @Transactional(readOnly = true)
    public Optional<EventDTO> findById(Long id) {
        if (id == null) {
            log.warn("–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏—è —Å null ID");
            return Optional.empty();
        }

        log.info("–ü–æ–∏—Å–∫ —Å–æ–±—ã—Ç–∏—è –ø–æ ID={}", id);
        return eventRepository.findById(id).map(eventMapper::toDto);
    }

    @Transactional
    public void deleteById(Long id) {
        if (id == null) {
            log.error("–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ —Å null ID");
            throw new IllegalArgumentException("ID —Å–æ–±—ã—Ç–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å null");
        }

        log.info("üóë –ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è ID={}", id);

        if (!eventRepository.existsById(id)) {
            log.error("–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ID={}", id);
            throw new RuntimeException("–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: " + id);
        }

        eventRepository.deleteById(id);
        log.info("–°–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ: ID={}", id);
    }

    @Transactional(readOnly = true)
    public List<EventDTO> findByUserId(Long userId) {
        if (userId == null) {
            log.warn("–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏—è —Å null userId");
            return List.of();
        }

        log.info("–ü–æ–∏—Å–∫ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID={}", userId);

        return eventRepository.findByUsers_Id(userId).stream()
                .map(eventMapper::toDto)
                .collect(Collectors.toList());
    }
}




