package webgroup.websocket.services;


import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import webgroup.websocket.config.NotificationWebSocketSender;
import webgroup.websocket.entities.Event;
import webgroup.websocket.entities.PendingNotification;
import webgroup.websocket.entities.User;
import webgroup.websocket.repositories.EventRepository;
import webgroup.websocket.repositories.PendingNotificationRepository;
import webgroup.websocket.repositories.UserRepository;
import webgroup.websocket.utils.NotificationPeriodUtils;
import webgroup.websocket.utils.NotificationSchedulerUtils;
import webgroup.websocket.utils.NotificationUtils;

import java.time.LocalDateTime;
import java.util.*;

import java.util.concurrent.CopyOnWriteArrayList;


@Service
@Slf4j
@RequiredArgsConstructor
public class NotificationService {

    private final UserRepository userRepository;
    private final NotificationWebSocketSender webSocketSender;
    private final PendingNotificationRepository pendingNotificationRepository;
    private final NotificationSchedulerUtils notificationSchedulerUtils;
    private final EventRepository eventRepository;
    private final NotificationUtils notificationUtils;
    private final NotificationPeriodUtils notificationPeriodUtils;

    @Transactional
    public void processEvent(Event event) {
        log.info("–ù–∞—á–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è ID={} [{}]", event.getId(), event.getMessage());

        List<User> users = new CopyOnWriteArrayList<>(userRepository.findAllWithNotificationPeriods());
        List<User> updatedUsers = new CopyOnWriteArrayList<>();
        for (User user : users) {
            log.debug("–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} (ID={})", user.getFullName(), user.getId());

            boolean alreadyHasEvent = user.getEvents().stream()
                    .anyMatch(e -> e.getId() != null && e.getId().equals(event.getId()));

            if (alreadyHasEvent) {
                log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} —É–∂–µ –ø–æ–ª—É—á–∏–ª —Å–æ–±—ã—Ç–∏–µ {}", user.getFullName(), event.getId());
                continue;
            }

            user.addEvent(event);
            log.debug("–°–æ–±—ã—Ç–∏–µ {} –ø—Ä–∏–≤—è–∑–∞–Ω–æ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {}", event.getId(), user.getFullName());

            if (notificationPeriodUtils.isWithinNotificationPeriod(user, event.getOccurredAt())) {
                if (notificationUtils.sendNotification(user, event)) {
                    log.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {} (eventId={})", user.getId(), event.getId());
                    updatedUsers.add(user);
                } else {
                    log.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {} (eventId={}). –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ...", user.getId(), event.getId());
                    notificationSchedulerUtils.schedulePendingNotificationIfNecessary(user, event);
                }

            } else {
                notificationSchedulerUtils.schedulePendingNotificationIfNecessary(user, event);
            }

        }

        if (!updatedUsers.isEmpty()) {
            userRepository.saveAll(updatedUsers);
            log.info("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–æ–≤—ã–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏", updatedUsers.size());
        }

        log.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è ID={}", event.getId());
    }

    public void sendPendingToFront(Long userId) {
        List<PendingNotification> pendingList = pendingNotificationRepository.findAllByUserId(userId);

        List<Map<String, Object>> payloadList = new ArrayList<>();
        List<PendingNotification> toDelete = new ArrayList<>();
        Optional<User> optionalUser = userRepository.findByIdWithNotificationPeriods(userId);
        if (optionalUser.isEmpty()) {
            log.warn("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID={} –Ω–µ –Ω–∞–π–¥–µ–Ω", userId);
            return;
        }
        User user = optionalUser.get();

        LocalDateTime now = LocalDateTime.now();

        for (PendingNotification pending : pendingList) {
            if (!notificationPeriodUtils.isWithinNotificationPeriod(user, now)) {
                log.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è userId={} –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚Äî –≤–Ω–µ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", userId);
                continue;
            }
            eventRepository.findById(pending.getEventId()).ifPresent(event -> {
                Map<String, Object> map = new HashMap<>();
                map.put("eventId", event.getId());
                map.put("msg", event.getMessage());
                map.put("scheduledTime", pending.getScheduledTime().toString());
                payloadList.add(map);
                toDelete.add(pending);
            });
        }

        if (!payloadList.isEmpty()) {
            try {
                String json = new ObjectMapper().writeValueAsString(payloadList);
                webSocketSender.sendToTopic("/topic/pending/" + userId, json);
                log.info("–û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID={}", userId);

                pendingNotificationRepository.deleteAll(toDelete);
                log.info("üóë –£–¥–∞–ª–µ–Ω–æ {} –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID={}", toDelete.size(), userId);

            } catch (JsonProcessingException e) {
                log.error("–û—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {}", e.getMessage());
            }
        } else {
            log.info("–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID={} –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏", userId);
        }
    }


}






